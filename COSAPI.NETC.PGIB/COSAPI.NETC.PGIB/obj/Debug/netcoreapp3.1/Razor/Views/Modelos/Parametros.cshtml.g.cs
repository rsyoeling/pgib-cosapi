#pragma checksum "F:\2024\cosapi\general\COSAPI.NETC.PGIB\COSAPI.NETC.PGIB\Views\Modelos\Parametros.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "de35f43218c55395f15ff05df4b9ff9f2d1db5d4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Modelos_Parametros), @"mvc.1.0.view", @"/Views/Modelos/Parametros.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\2024\cosapi\general\COSAPI.NETC.PGIB\COSAPI.NETC.PGIB\Views\_ViewImports.cshtml"
using COSAPI.NETC.PGIB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\2024\cosapi\general\COSAPI.NETC.PGIB\COSAPI.NETC.PGIB\Views\_ViewImports.cshtml"
using COSAPI.NETC.PGIB.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"de35f43218c55395f15ff05df4b9ff9f2d1db5d4", @"/Views/Modelos/Parametros.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aa2bc4fdf0f82918345b302dae75a6758dd2cbac", @"/Views/_ViewImports.cshtml")]
    public class Views_Modelos_Parametros : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/myawesomeextension_2.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/myawesomeextension.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/forge-js/ForgeViewer_1.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/handleselectionextension.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("uploadForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("formulario"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("mt-3"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<!-- aÃ±adir viewer forge autodesk -->
<link rel=""stylesheet"" href=""https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/style.min.css"" type=""text/css"">
<script src=""https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/viewer3D.min.js""></script>

<!-- Extensiones -->
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "de35f43218c55395f15ff05df4b9ff9f2d1db5d46661", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "de35f43218c55395f15ff05df4b9ff9f2d1db5d47700", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "de35f43218c55395f15ff05df4b9ff9f2d1db5d48739", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "de35f43218c55395f15ff05df4b9ff9f2d1db5d49778", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<div class=""content"">
    <!-- dividir en 2 columnas -->
    <div class=""row"">
        <div class=""col-6"">
            <!-- Form inputs -->
            <div class=""card"">
                <div class=""card-header header-elements-inline"">
                    <h5 class=""card-title"">Subir Modelos</h5>
                    <div class=""header-elements"">
                        <div class=""list-icons"">

                            <a class=""list-icons-item"" data-action=""collapse""></a>
                            <a class=""list-icons-item"" data-action=""reload""></a>
                            <a class=""list-icons-item"" data-action=""remove""></a>
                        </div>
                    </div>
                </div>

                <div class=""card-body"">
                    <!-- form para cargar archivo -->
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "de35f43218c55395f15ff05df4b9ff9f2d1db5d411707", async() => {
                WriteLiteral(@"
                        <div class=""form-group"">
                            <label for=""archivo"">Selecciona un archivo Revit o IFC</label>



                            <div class=""custom-file"">
                                <input type=""file"" class=""file-input"" id=""archivo"" name=""archivo"" accept="".rvt"" data-show-preview=""false"" data-fouc>
                                <label class=""custom-file-label"" for=""archivo"">Elegir archivo...</label>
                            </div>

                            <hr>
                            <label for=""archivo"">Indicar disciplina del modelo</label>
                            <!-- desplegable para seleccionar la disciplina -->
                            <!--
                                <select id=""disciplina"" name=""disciplina"" class=""form-control"" required>
                                    <option value="""" disabled selected>Selecciona una disciplina</option>
                                    <option value=""arquitectura"">Arquitectu");
                WriteLiteral(@"ra</option>
                                    <option value=""estructuras"">Estructuras</option>
                                    <option value=""instalaciones"">Instalaciones</option>
                                </select>
                                -->
                            <input type=""text"" class=""form-control"" name=""disciplina"" id=""disciplina"">
                        </div>
                        <button id=""btnCargar"" type=""button"" class=""btn btn-primary mr-2"" onclick=""subirArchivo()"">Cargar</button>
                        <button id=""btnObtenerParÃ¡metros"" type=""button"" class=""btn btn-primary"" onclick=""obtenerParametros()"" disabled=""true"">Obtener parÃ¡metros</button>
                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    <!-- form para seleccionar parametros a setear -->\r\n\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "de35f43218c55395f15ff05df4b9ff9f2d1db5d414969", async() => {
                WriteLiteral("\r\n                        <label for=\"archivo\">SelecciÃ³n parÃ¡metros Cosapi:</label>\r\n\r\n\r\n                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <!-- Las preguntas se agregarÃ¡n aquÃ­ -->
                    <div class=""d-flex justify-content-between"" id=""formParametrizar"">
                        <!--<button id=""agregarPregunta"" type=""button"" class=""btn btn-primary mt-3"">AÃ±adir</button> descomentar YR-->
                        <button id=""btncrearparametros"" type=""button"" class=""btn btn-primary mt-3"">Crear</button>
                        <!-- <button id=""btnVerModelo"" type=""button"" class=""btn btn-primary mt-3"">Ver</button> -->
                    </div>
                </div>
                <!-- /form inputs -->
            </div>
            <!-- SecciÃ³n ConfiguraciÃ³n de parÃ¡metros -->
            <div class=""card mt-4"">
                <div class=""card-header"">
                    ConfiguraciÃ³n de parÃ¡metros:
                </div>
                <div class=""card-body"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "de35f43218c55395f15ff05df4b9ff9f2d1db5d417409", async() => {
                WriteLiteral(@"
                        <div id=""parameters-container"">
                            <div class=""form-row align-items-end parameter-row"">
                                <div class=""col-md-5"">
                                    <div class=""form-group"">
                                        <label>Grupo</label>
                                        <select id=""grupo"" class=""form-control"">
                                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "de35f43218c55395f15ff05df4b9ff9f2d1db5d418124", async() => {
                    WriteLiteral("Selecciona una opciÃ³n");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                        </select>
                                    </div>
                                </div>
                                <div class=""col-md-5"">
                                    <div class=""form-group"">
                                        <label>ParÃ¡metro</label>
                                        <select id=""parambim"" class=""form-control"">
                                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "de35f43218c55395f15ff05df4b9ff9f2d1db5d419818", async() => {
                    WriteLiteral("Selecciona una opciÃ³n");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div class=""form-row align-items-end parameter-row"">
                                <div class=""col-md-5"">
                                    <div class=""form-group"" id=""valoresunicos"">

                                    </div>
                                </div>
                            </div>

                        </div>
                        <!--  <div id=""parameters-container"">
                            <div class=""form-row align-items-end parameter-row"">
                                <div class=""col-md-5"">
                                    <div class=""form-group"">
                                        <label>Construction</label>
                                        <select class=""form-control"">
                                            <option>NIVEL</option>

 ");
                WriteLiteral(@"                                       </select>
                                    </div>
                                </div>
                                <div class=""col-md-5"">
                                    <div class=""form-group"">
                                        <label>AsignaciÃ³n</label>
                                        <select class=""form-control"">
                                            <option>NIVEL</option>
                                        </select>
                                    </div>
                                </div>
                                <div class=""col-md-2"">
                                    <button type=""button"" class=""btn btn-danger"" onclick=""removeParameterRow(this)"">&times;</button>
                                </div>
                            </div>
                        </div>
                        <button type=""button"" class=""btn btn-link"" onclick=""addParameterRow()"">AÃ±adir</button> -->
                 ");
                WriteLiteral("       <button type=\"submit\" class=\"btn btn-primary float-right\" onclick=\"saveSettingParameters(event)\">Guardar</button>\r\n                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </div>
            </div>
        </div>
        <div class=""col-6"" style=""height: 100vh"">
            <!-- card para visualizar el modelo subido 100 del alto -->
            <!-- estilos para abarcar todo el ancho -->
            <style>
                #viewer {
                    width: 100%;
                    height: 100%;
                    margin: 0;
                    padding: 0;
                    overflow: hidden;
                    position: relative;
                }
            </style>

            <div class=""card"" style=""height: 100vh"">
                <div class=""card-header header-elements-inline"">
                    <h5 class=""card-title"">Visor:</h5>
                    <div class=""header-elements"">
                        <div class=""list-icons"">

                            <a class=""list-icons-item"" data-action=""collapse""></a>
                            <a class=""list-icons-item"" data-action=""reload""></a>
                            <a ");
            WriteLiteral(@"class=""list-icons-item"" data-action=""remove""></a>
                        </div>
                    </div>
                </div>
                <div class=""card-body"">
                    <!-- div para visualizar el modelo -->
                    <div id=""viewer""></div>

                </div>

            </div>

        </div>
    </div>

</div>
<script>
    $(document).ready(function () {


        //obtener token forge autodesk
        var token = """";
        var url = ""https://developer.api.autodesk.com/authentication/v1/authenticate"";
        var data = {
            ""client_id"": ""wIHjqGVk5Geso1ZGaLFpsqU0UiX7UP4j"",
            ""client_secret"": ""4nc2icC3F8fKlQkX"",
            ""grant_type"": ""client_credentials"",
            ""scope"": ""code:all data:write data:read bucket:create bucket:delete bucket:read""
        };
        $.ajax({
            url: url,
            type: ""POST"",
            data: data,
            success: function (data) {

                token = dat");
            WriteLiteral(@"a.access_token;
                //guardar token en variable de sesion
                localStorage.setItem(""token"", 'Bearer ' + token);
                //console.log(token);
            },
            error: function (data) {
                console.log(data);
            }
        });

    });

    function subirArchivo() {
        //console.log('subirArchivo');
        const token = localStorage.getItem('token');
        //alert('token: ' + token);
        const inputFile = document.getElementById('archivo');
        const file = inputFile.files[0];

        if (!file) {
            Swal.fire({
                title: 'Error',
                text: 'Por favor, selecciona un archivo Revit (.rvt) vÃ¡lido.',
                icon: 'error'
            });
            return;
        }

        const bucketKey = 'test2_chile_antofagasta'; // Reemplaza con el nombre de tu bucket en Autodesk Forge
        const objectName = file.name;
        //console.log(objectName); YR
        const ");
            WriteLiteral(@"apiUrl = `https://developer.api.autodesk.com/oss/v2/buckets/${bucketKey}/objects/${objectName}`;

        const formData = new FormData();
        formData.append('file', file);
        // Mostrar spinner de carga
        Swal.fire({
            title: 'Subiendo archivo',
            allowOutsideClick: false,
            onBeforeOpen: () => {
                Swal.showLoading();
            },
        });
        // Realiza la solicitud de carga
        fetch(apiUrl, {
            method: 'PUT',
            headers: {
                'Authorization': token, // Reemplaza con tu token de autorizaciÃ³n de Autodesk Forge
            },
            body: file,
        })
            .then(response => response.json())
            .then(data => {
                //console.log(data); YR
                // Ocultar spinner y mostrar mensaje de Ã©xito
                Swal.fire({
                    title: 'Archivo subido exitosamente',
                    icon: 'success',
                });
   ");
            WriteLiteral(@"             //almacenar el valor de urn
                const base64ObjectId = btoa(data.objectId);
                localStorage.setItem('urn', base64ObjectId);
                // ObtÃ©n el elemento del botÃ³n por su ID
                const btnCargar = document.getElementById('btnCargar');
                const btnObtenerParametros = document.getElementById('btnObtenerParÃ¡metros');
                // Deshabilita el botÃ³n
                btnObtenerParametros.disabled = false;


            })
            .catch(error => {
                console.error('Error al subir el archivo:', error);
                // Ocultar spinner y mostrar mensaje de error
                Swal.fire({
                    title: 'Error al subir el archivo',
                    text: 'Ha ocurrido un error al subir el archivo.',
                    icon: 'error',
                });
            });
    }

    function obtenerParametros() {
        // traducir el archivo y mostrar el progreso
        Swal.fire({
 ");
            WriteLiteral(@"           title: 'Traduciendo archivo',
            allowOutsideClick: false,
            onBeforeOpen: () => {
                Swal.showLoading();
            }
        });
        // usar https://developer.api.autodesk.com/modelderivative/v2/designdata/job para la traducciÃ³n
        const token = localStorage.getItem('token');
        const urn = localStorage.getItem('urn');
        //console.log(urn);
        const apiUrl = 'https://developer.api.autodesk.com/modelderivative/v2/designdata/job';
        const job = {
            input: {
                urn: urn,
            },
            output: {
                formats: [
                    {
                        type: 'svf',
                        views: ['2d', '3d'],
                    },
                ],
            },
        };
        fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Authorization': token,
                'Content-Type': 'application/json',
            },
   ");
            WriteLiteral(@"         body: JSON.stringify(job),
        })
            .then(response => response.json())
            .then(data => {
                //console.log('obtenerParametros: ' + data);

                /*
                 * // Mostrar mensaje de Ã©xito
                 * Swal.fire({
                 * title: 'Archivo traducido exitosamente',
                 * icon: 'success',
                 * });
                */

                // Obtener el ID del trabajo
                //const workItemId = data.id;
                // Obtener el estado del trabajo
                obtenerEstadoTrabajo();

            })
            .catch(error => {
                console.error('Error al traducir el archivo:', error);
                // Ocultar spinner y mostrar mensaje de error
                Swal.fire({
                    title: 'Error al traducir el archivo',
                    text: 'Ha ocurrido un error al traducir el archivo.',
                    icon: 'error',
                });
 ");
            WriteLiteral(@"           }
            );

    }

    // obtener el estado del trabajo
    function obtenerEstadoTrabajo() {
        const token = localStorage.getItem('token');
        const urn = localStorage.getItem('urn');
        const apiUrl = `https://developer.api.autodesk.com/modelderivative/v2/designdata/${urn}/manifest`;
        fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': token,
            },
        })
            .then(response => response.json())
            .then(data => {
                //console.log('obtenerEstadoTrabajo: ' + data);
                // Obtener el estado del trabajo
                const status = data.status;
                if (status === 'inprogress') {
                    setTimeout(() => {
                        obtenerEstadoTrabajo();
                    }, 5000);
                    Swal.fire({
                        title: 'Traduciendo archivo',
                        allowOutsideClick: false,
    ");
            WriteLiteral(@"                    onBeforeOpen: () => {
                            Swal.showLoading();
                        }
                    });


                } else if (status === 'success') {
                    // Si el trabajo ha finalizado correctamente, obtener los parÃ¡metros
                    //obtenerParametros();

                    var urn = localStorage.getItem('urn');
                    mostrarModelo(urn).then(function () {
                        // Proceso terminado, mostrar mensaje
                        Swal.fire({
                            title: 'Proceso terminado',
                            icon: 'success',
                        });
                    })
                        .catch(function (error) {
                            // Manejar cualquier error que pueda ocurrir durante el proceso
                            console.error('Error:', error);
                        });

                    //getParametros(); YR descomentar

                    ");
            WriteLiteral(@"/*
                     descomentar yr
                        Swal.fire({
                            title: 'Archivo traducido exitosamente',
                            icon: 'success',
                        });
                     */


                } else {
                    // Si el trabajo ha fallado, mostrar mensaje de error
                    Swal.fire({
                        title: 'Error al traducir el archivo',
                        text: 'Ha ocurrido un error al traducir el archivo.',
                        icon: 'error',
                    });
                }
            })
            .catch(error => {
                console.error('Error al obtener el estado del trabajo:', error);
                // Ocultar spinner y mostrar mensaje de error
                Swal.fire({
                    title: 'Error al traducir el archivo',
                    text: 'Ha ocurrido un error al traducir el archivo.',
                    icon: 'error',
                });");
            WriteLiteral(@"
            });
    }

    // funcion para mostrar el modelo en viewer
    function mostrarModelo(urn) {
        //mostrar el modelo en el viewer
        //var urn = localStorage.getItem('urn');

        return new Promise(function (resolve, reject) {
            // LÃ³gica para lanzar el visor aquÃ­
            //launchViewer(urn);
            launchViewer('dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6dGVzdDJfY2hpbGVfYW50b2ZhZ2FzdGEvMDMtQ1I0MzIwLUJJTS1NT0QtVE9SUkUuQ0FQVEFDSU9OLjQuaWZj');
            // Supongamos que despuÃ©s de lanzar el visor llamamos a resolve para indicar que el proceso ha terminado
            resolve();
        });

    }


    //traer todos los parÃ¡metros de get http://localhost:3500/getParametros
    function getParametros() {
        $.ajax({
            url: 'http://localhost:3500/getParametros',
            type: ""GET"",
            success: function (data) {
                //console.log(data);
                //almacenar los valores de familia en un json localsotr");
            WriteLiteral(@"age
                localStorage.setItem('familias', JSON.stringify(data));

            }
        })
    }

    //prueba*********************************************************
    $('#btncrearparametros').click(function () {
        //var uniqueProperties = {};

        //var jsonData = {

        //};

        //// Recorremos el JSON original
        //$.each(jsonData.data.collection, function (index, item) {
        //    $.each(item.properties, function (key, value) {
        //        // Verificamos si la propiedad ya existe en uniqueProperties
        //        if (!(key in uniqueProperties)) {
        //            uniqueProperties[key] = {};
        //        }
        //        // Iteramos sobre los subvalores de la propiedad
        //        $.each(value, function (subKey, subValue) {
        //            if (!(subKey in uniqueProperties[key])) {
        //                uniqueProperties[key][subKey] = [];
        //            }
        //            // Agregamos el ");
            WriteLiteral(@"subvalor solo si no existe en el array
        //            if ($.inArray(subValue, uniqueProperties[key][subKey]) === -1) {
        //                uniqueProperties[key][subKey].push(subValue);
        //            }
        //        });
        //    });
        //});

        //// Mostramos el resultado en la consola
        //console.log(JSON.stringify(uniqueProperties));

        //*****************************************************************
        const token = localStorage.getItem('token');
        const urn = localStorage.getItem('urn');

        const apiUrl = `https://developer.api.autodesk.com/modelderivative/v2/designdata/${urn}/metadata`;
        fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': token,
            },
        })
            .then(response => response.json())
            .then(data => {
                // Recorremos el array de metadatos
                $.each(data.data.metadata, function (index, i");
            WriteLiteral(@"tem) {
                    // Verificamos si el objeto tiene la clave ""guid""
                    if (""guid"" in item) {
                        var guidValue = item.guid;
                        console.log('Recuperar una lista de elementos visibles: ' + guidValue);
                        localStorage.setItem(""guid"", guidValue);
                        // AquÃ­ puedes usar guidValue como necesites
                    }
                });
            })
            .catch(error => {
                console.error('Error al obtener elementos visibles:', error);
                // Ocultar spinner y mostrar mensaje de error
                Swal.fire({
                    title: 'Error al obtener elementos visibles',
                    text: 'Ha ocurrido un error al obtener elementos visibles.',
                    icon: 'error',
                });
            }
            );
        //*****************************************************************
        //Recuperar propiedades de objeto");
            WriteLiteral(@"s en un Visor
        const guid = localStorage.getItem('guid');
        console.log('1111: ' + urn); //guid
        const apiUrlProp = `https://developer.api.autodesk.com/modelderivative/v2/designdata/${urn}/metadata/${guid}/properties`;
        fetch(apiUrlProp, {
            method: 'GET',
            headers: {
                'Authorization': token,
            },
        })
            .then(response => response.json())
            .then(data => {
                //console.log('total json: ' + data);
                var uniqueProperties = {};
                // Recorremos el JSON original
                $.each(data.data.collection, function (index, item) {
                    $.each(item.properties, function (key, value) {
                        // Verificamos si la propiedad ya existe en uniqueProperties
                        if (!(key in uniqueProperties)) {
                            uniqueProperties[key] = {};
                        }
                        // Iteramos so");
            WriteLiteral(@"bre los subvalores de la propiedad
                        $.each(value, function (subKey, subValue) {
                            if (!(subKey in uniqueProperties[key])) {
                                uniqueProperties[key][subKey] = [];
                            }
                            // Agregamos el subvalor solo si no existe en el array
                            if ($.inArray(subValue, uniqueProperties[key][subKey]) === -1) {
                                uniqueProperties[key][subKey].push(subValue);
                            }
                        });
                    });
                });

                // Mostramos el resultado en la consola
                //console.log(JSON.stringify(uniqueProperties));
                localStorage.setItem(""dataprop"", JSON.stringify(uniqueProperties));

                // Obtener los tÃ­tulos de cada grupo en el JSON
                var titles = Object.keys(uniqueProperties);

                // Recorrer los tÃ­tulos y mos");
            WriteLiteral(@"trarlos
                $.each(titles, function (index, title) {
                    //console.log(""TÃ­tulo del grupo:"", title);
                    $(""#grupo"").append('<option value=""' + title + '"">' + title + '</option>');
                });
            })
            .catch(error => {
                console.error('Error al obtener propiedades de objetos:', error);
                // Ocultar spinner y mostrar mensaje de error
                Swal.fire({
                    title: 'Error al obtener propiedades de objetos',
                    text: 'Ha ocurrido un error al obtener propiedades de objetos.',
                    icon: 'error',
                });
            }
            );

    });

    // Escuchar el evento change en el select grupo
    $(""#grupo"").on(""change"", function () {
        var selectedValue = $(this).val();
        //console.log(""OpciÃ³n seleccionada:"", selectedValue);
        //console.log(""dataprop"", localStorage.getItem('dataprop'));

        // AquÃ­ pue");
            WriteLiteral(@"des realizar acciones basadas en la opciÃ³n seleccionada
        var data = JSON.parse(localStorage.getItem('dataprop')); //JSON.parse(json);

        // Nombre del grupo a recorrer
        //var groupName = ""Constraints"";

        $('#parambim').empty();

        // Recorrer las claves del grupo seleccionado
        Object.keys(data[selectedValue]).forEach(function (key) {
            //console.log(""parÃ¡metros: "" + key);
            $(""#parambim"").append('<option value=""' + key + '"">' + key + '</option>');
        });
    });

    // Escuchar el evento change en el select parÃ¡metro
    $(""#parambim"").on(""change"", function () {
        var selectedGrupo = $('#grupo').val();
        var selectedValue = $(this).val();
        var data = JSON.parse(localStorage.getItem('dataprop')); //JSON.parse(json);

        //console.log(""OpciÃ³n seleccionada:"", selectedValue);
        //console.log(""dataprop"", data);

        // Obtener los valores de Level del JSON
        var valoresSelec = data[sel");
            WriteLiteral(@"ectedGrupo][selectedValue];
        $(""#valoresunicos"").empty();
        // Recorrer los valores y hacer algo con cada uno
        valoresSelec.forEach(function (valor) {
            // Hacer algo con cada valor, por ejemplo, imprimirlo en la consola
            //console.log(valor);
            //$(""#valoresunicos"").append(valor + '<br>');

            var $textbox = $('<input>', {
                type: 'text',
                value: valor, //offset,
                id: 'textbox-', //+ index,
                disabled: true // Deshabilitado por defecto
            });

            var $checkbox = $('<input>', {
                type: 'checkbox',
                id: 'checkbox-' //+ index
            });

            var $label = $('<label>', {
                for: 'checkbox-', //+ index,
                text: ' Habilitar ediciÃ³n'
            });

            $checkbox.change(function () {
                toggleTextbox(this, $textbox);
            });

            $(""#valoresunicos"")");
            WriteLiteral(@".append($textbox);
            $(""#valoresunicos"").append($checkbox);
            $(""#valoresunicos"").append($label);
            $(""#valoresunicos"").append('<br>');
        });
    });

    // FunciÃ³n para habilitar/deshabilitar el textbox
    function toggleTextbox(checkbox, textbox) {
        textbox.prop('disabled', !$(checkbox).is(':checked'));
    }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
