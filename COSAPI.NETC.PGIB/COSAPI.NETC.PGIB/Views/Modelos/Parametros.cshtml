<!-- añadir viewer forge autodesk -->
<link rel="stylesheet" href="https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/style.min.css" type="text/css">
<script src="https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/viewer3D.min.js"></script>

<!-- Extensiones -->
<script src="~/js/myawesomeextension_2.js"></script>
<script src="~/js/myawesomeextension.js"></script>
<script src="~/js/forge-js/ForgeViewer_1.js"></script>
<script src="~/js/handleselectionextension.js"></script>

<div class="content">
    <!-- dividir en 2 columnas -->
    <div class="row">
        <div class="col-6">
            <!-- Form inputs -->
            <div class="card">
                <div class="card-header header-elements-inline">
                    <h5 class="card-title">Subir Modelos</h5>
                    <div class="header-elements">
                        <div class="list-icons">

                            <a class="list-icons-item" data-action="collapse"></a>
                            <a class="list-icons-item" data-action="reload"></a>
                            <a class="list-icons-item" data-action="remove"></a>
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <!-- form para cargar archivo -->
                    <form id="uploadForm">
                        <div class="form-group">
                            <label for="archivo">Selecciona un archivo Revit o IFC</label>

                            <div class="custom-file">
                                <input type="file" class="file-input" id="archivo" name="archivo" accept=".rvt" data-show-preview="false" data-fouc>
                                <label class="custom-file-label" for="archivo">Elegir archivo...</label>
                            </div>

                            <hr>
                            <label for="archivo">Indicar disciplina del modelo</label>
                            <!-- desplegable para seleccionar la disciplina -->
                            <!--
                                <select id="disciplina" name="disciplina" class="form-control" required>
                                    <option value="" disabled selected>Selecciona una disciplina</option>
                                    <option value="arquitectura">Arquitectura</option>
                                    <option value="estructuras">Estructuras</option>
                                    <option value="instalaciones">Instalaciones</option>
                                </select>
                                -->
                            <input type="text" class="form-control" name="disciplina" id="disciplina">
                        </div>
                        <button id="btnCargar" type="button" class="btn btn-primary mr-2" onclick="subirArchivo()">Cargar</button>
                        <button id="btnObtenerParámetros" type="button" class="btn btn-primary" onclick="obtenerParametros()" disabled="true">Obtener parámetros</button>
                    </form>
                </div>
                <!-- /form inputs -->
            </div>
            <!-- Sección Configuración de parámetros -->
            <div class="card">
                <div class="card-header header-elements-inline">
                    <h5 class="card-title">Configuración de parámetros:</h5>
                    <div class="header-elements">
                        <div class="list-icons">
                            <a class="list-icons-item" data-action="collapse"></a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- form para seleccionar parametros a setear -->

                    <form id="formulario" class="mt-3">
                        <label for="archivo">Parámetro Cosapi</label>
                        <select id="parametrocosapi" class="form-control">
                            <option value="0">Seleccione un parámetro</option>
                            <option value="1">ACTIVIDAD_CRONOGRAMA</option>
                            <option value="2">ALTURA</option>
                            <option value="3">AMBIENTE</option>
                            <option value="4">AREA</option>
                            <option value="5">AVANCE</option>
                            <option value="6">CAMPO_FRENTE</option>
                            <option value="7">CANTIDAD</option>
                            <option value="8">CODIGO_OBRA</option>
                            <option value="9">COD_AMBIENTE</option>
                            <option value="10">COD_CONSULTA</option>
                            <option value="11">COD_INTERFERENCIA</option>
                            <option value="12">COD_TIPICO_ELEMENTO</option>
                            <option value="13">COTA_INFERIOR</option>
                            <option value="14">COTA_SUPERIOR</option>
                            <option value="15">CUADRILLA</option>
                            <option value="16">DESCRIPCION_AREA</option>
                            <option value="17">DESCRIPCION_ELEMENTO</option>
                            <option value="18">DESCRIPCION_ELEMENTO_PRINCIPAL</option>
                            <option value="19">DESCRIPCION_FRENTE</option>
                            <option value="20">DESCRIPCION_LOTE</option>
                            <option value="21">DESCRIPCION_PARTIDA</option>
                            <option value="22">DESCRIPCION_SECTOR</option>
                            <option value="23">DESCRIPCION_SUBLOTE</option>
                            <option value="24">DESCRIPCION_WBS_NIVEL_1</option>
                            <option value="25">DESCRIPCION_WBS_NIVEL_2</option>
                            <option value="26">DESCRIPCION_WBS_NIVEL_3</option>
                            <option value="27">DESCRIPCION_WBS_NIVEL_4</option>
                            <option value="28">DESCRIPCION_WBS_NIVEL_5</option>
                            <option value="29">DIM_A</option>
                            <option value="30">DIM_B</option>
                            <option value="31">DIM_C</option>
                            <option value="32">EJECUTADO</option>
                            <option value="33">EJE_H</option>
                            <option value="34">EJE_V</option>
                            <option value="35">ESPECIFICACION_TECNICA</option>
                            <option value="36">ESTADO_AVANCE</option>
                            <option value="37">ESTATUS_MODELADO</option>
                            <option value="38">EST_DIMENSION</option>
                            <option value="39">EST_MODELADO</option>
                            <option value="40">EST_TIPO</option>
                            <option value="41">EST_UBICACION</option>
                            <option value="42">EXPORTAR</option>
                            <option value="43">FACTOR</option>
                            <option value="44">FASE</option>
                            <option value="45">FASEO</option>
                            <option value="46">FECHA_EJECUTADA</option>
                            <option value="47">FECHA_PLANIFICADA</option>
                            <option value="48">HOST</option>
                            <option value="49">H_V</option>
                            <option value="50">ID_CRONOGRAMA</option>
                            <option value="51">ID_ELEMENTO</option>
                            <option value="52">ID_EXTERNAL</option>
                            <option value="53">ID_PARTIDA</option>
                            <option value="54">INSTALACION</option>
                            <option value="55">IRREGULAR</option>
                            <option value="56">LOTE</option>
                            <option value="57">MARCA_ELEMENTO</option>
                            <option value="58">MARCA_ELEMENTO_PRINCIPAL</option>
                            <option value="59">MOD_INSTALACION</option>
                            <option value="60">MONTO_FINAL</option>
                            <option value="61">NIVEL</option>
                            <option value="62">PLANO_CONSTRUCCION</option>
                            <option value="63">PLANO_DETALLE</option>
                            <option value="64">PU</option>
                            <option value="65">RESPONSABLE</option>
                            <option value="66">REV_PLANO_CONSTRUCCION</option>
                            <option value="67">REV_PLANO_DETALLE</option>
                            <option value="68">RUBRO</option>
                            <option value="69">SECTOR</option>
                            <option value="70">SECUENCIA</option>
                            <option value="71">SISTEMA</option>
                            <option value="72">SUBLOTE</option>
                            <option value="73">UBICACION</option>
                            <option value="74">UNIDAD</option>
                            <option value="75">WBS_NIVEL_1</option>
                            <option value="76">WBS_NIVEL_2</option>
                            <option value="77">WBS_NIVEL_3</option>
                            <option value="78">WBS_NIVEL_4</option>
                            <option value="79">WBS_NIVEL_5</option>
                        </select>
                    </form>
                    <!-- Las preguntas se agregarán aquí -->
                    <div class="d-flex justify-content-between" id="formParametrizar">
                        <!--<button id="agregarPregunta" type="button" class="btn btn-primary mt-3">Añadir</button> descomentar YR-->
                        <button id="btncrearparametros" type="button" class="btn btn-primary mt-3">Cargar</button>
                        <!-- <button id="btnVerModelo" type="button" class="btn btn-primary mt-3">Ver</button> -->
                    </div>

                    <form>
                        <div id="parameters-container">
                            <div class="form-row align-items-end parameter-row">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <label>Grupo</label>
                                        <select id="grupo" class="form-control">
                                            <option value="0">Selecciona una opción</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <label>Parámetro BIM</label>
                                        <select id="parambim" class="form-control">
                                            <option value="0">Selecciona una opción</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-2-md-5">
                                    <div class="form-group">
                                        <button type="submit" class="btn btn-primary" id="registrar">Asignar</button>
                                    </div>
                                </div>
                            </div>

                            <div class="form-row align-items-end parameter-row">
                                <div class="col-md-5">
                                    <div class="form-group" id="valoresunicos">

                                    </div>
                                </div>
                            </div>

                        </div>
                        <!--  <div id="parameters-container">
                            <div class="form-row align-items-end parameter-row">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <label>Construction</label>
                                        <select class="form-control">
                                            <option>NIVEL</option>

                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <label>Asignación</label>
                                        <select class="form-control">
                                            <option>NIVEL</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <button type="button" class="btn btn-danger" onclick="removeParameterRow(this)">&times;</button>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-link" onclick="addParameterRow()">Añadir</button> 
                        onclick="saveSettingParameters(event)"-->
                        
                    </form>
                </div>
            </div>
            <button type="submit" class="btn btn-primary float-right" id="grabar">Registrar</button>
        </div>
        <div class="col-6" style="height: 100vh">
            <!-- card para visualizar el modelo subido 100 del alto -->
            <!-- estilos para abarcar todo el ancho -->
            <style>
                #viewer {
                    width: 100%;
                    height: 100%;
                    margin: 0;
                    padding: 0;
                    overflow: hidden;
                    position: relative;
                }
            </style>

            <div class="card" style="height: 100vh">
                <div class="card-header header-elements-inline">
                    <h5 class="card-title">Visor:</h5>
                    <div class="header-elements">
                        <div class="list-icons">

                            <a class="list-icons-item" data-action="collapse"></a>
                            <a class="list-icons-item" data-action="reload"></a>
                            <a class="list-icons-item" data-action="remove"></a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- div para visualizar el modelo -->
                    <div id="viewer"></div>

                </div>

            </div>

        </div>
    </div>

</div>
<script>
    $(document).ready(function () {


        //obtener token forge autodesk
        var token = "";
        var url = "https://developer.api.autodesk.com/authentication/v1/authenticate";
        var data = {
            "client_id": "wIHjqGVk5Geso1ZGaLFpsqU0UiX7UP4j",
            "client_secret": "4nc2icC3F8fKlQkX",
            "grant_type": "client_credentials",
            "scope": "code:all data:write data:read bucket:create bucket:delete bucket:read"
        };
        $.ajax({
            url: url,
            type: "POST",
            data: data,
            success: function (data) {

                token = data.access_token;
                //guardar token en variable de sesion
                localStorage.setItem("token", 'Bearer ' + token);
                //console.log(token);
            },
            error: function (data) {
                console.log(data);
            }
        });

        
    });

    function subirArchivo() {
        //console.log('subirArchivo');
        const token = localStorage.getItem('token');
        //alert('token: ' + token);
        const inputFile = document.getElementById('archivo');
        const file = inputFile.files[0];

        if (!file) {
            Swal.fire({
                title: 'Error',
                text: 'Por favor, selecciona un archivo Revit (.rvt) válido.',
                icon: 'error'
            });
            return;
        }

        const bucketKey = 'test2_chile_antofagasta'; // Reemplaza con el nombre de tu bucket en Autodesk Forge
        const objectName = file.name;
        localStorage.setItem('modelname', objectName);
        //console.log(objectName); YR
        const apiUrl = `https://developer.api.autodesk.com/oss/v2/buckets/${bucketKey}/objects/${objectName}`;

        const formData = new FormData();
        formData.append('file', file);
        // Mostrar spinner de carga
        Swal.fire({
            title: 'Subiendo archivo',
            allowOutsideClick: false,
            onBeforeOpen: () => {
                Swal.showLoading();
            },
        });
        // Realiza la solicitud de carga
        fetch(apiUrl, {
            method: 'PUT',
            headers: {
                'Authorization': token, // Reemplaza con tu token de autorización de Autodesk Forge
            },
            body: file,
        })
            .then(response => response.json())
            .then(data => {
                //console.log(data); YR
                // Ocultar spinner y mostrar mensaje de éxito
                Swal.fire({
                    title: 'Archivo subido exitosamente',
                    icon: 'success',
                });
                //almacenar el valor de urn
                const base64ObjectId = btoa(data.objectId);
                localStorage.setItem('urn', base64ObjectId);
                // Obtén el elemento del botón por su ID
                const btnCargar = document.getElementById('btnCargar');
                const btnObtenerParametros = document.getElementById('btnObtenerParámetros');
                // Deshabilita el botón
                btnObtenerParametros.disabled = false;


            })
            .catch(error => {
                console.error('Error al subir el archivo:', error);
                // Ocultar spinner y mostrar mensaje de error
                Swal.fire({
                    title: 'Error al subir el archivo',
                    text: 'Ha ocurrido un error al subir el archivo.',
                    icon: 'error',
                });
            });
    }

    function obtenerParametros() {
        // traducir el archivo y mostrar el progreso
        Swal.fire({
            title: 'Traduciendo archivo',
            allowOutsideClick: false,
            onBeforeOpen: () => {
                Swal.showLoading();
            }
        });
        // usar https://developer.api.autodesk.com/modelderivative/v2/designdata/job para la traducción
        const token = localStorage.getItem('token');
        const urn = localStorage.getItem('urn');
        //console.log(urn);
        const apiUrl = 'https://developer.api.autodesk.com/modelderivative/v2/designdata/job';
        const job = {
            input: {
                urn: urn,
            },
            output: {
                formats: [
                    {
                        type: 'svf',
                        views: ['2d', '3d'],
                    },
                ],
            },
        };
        fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Authorization': token,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(job),
        })
            .then(response => response.json())
            .then(data => {
                //console.log('obtenerParametros: ' + data);

                /*
                 * // Mostrar mensaje de éxito
                 * Swal.fire({
                 * title: 'Archivo traducido exitosamente',
                 * icon: 'success',
                 * });
                */

                // Obtener el ID del trabajo
                //const workItemId = data.id;
                // Obtener el estado del trabajo
                obtenerEstadoTrabajo();

            })
            .catch(error => {
                console.error('Error al traducir el archivo:', error);
                // Ocultar spinner y mostrar mensaje de error
                Swal.fire({
                    title: 'Error al traducir el archivo',
                    text: 'Ha ocurrido un error al traducir el archivo.',
                    icon: 'error',
                });
            }
            );

    }

    // obtener el estado del trabajo
    function obtenerEstadoTrabajo() {
        const token = localStorage.getItem('token');
        const urn = localStorage.getItem('urn');
        const apiUrl = `https://developer.api.autodesk.com/modelderivative/v2/designdata/${urn}/manifest`;
        fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': token,
            },
        })
            .then(response => response.json())
            .then(data => {
                //console.log('obtenerEstadoTrabajo: ' + data);
                // Obtener el estado del trabajo
                const status = data.status;
                if (status === 'inprogress') {
                    setTimeout(() => {
                        obtenerEstadoTrabajo();
                    }, 5000);
                    Swal.fire({
                        title: 'Traduciendo archivo',
                        allowOutsideClick: false,
                        onBeforeOpen: () => {
                            Swal.showLoading();
                        }
                    });


                } else if (status === 'success') {
                    // Si el trabajo ha finalizado correctamente, obtener los parámetros
                    //obtenerParametros();

                    var urn = localStorage.getItem('urn');
                    mostrarModelo(urn).then(function () {
                        // Proceso terminado, mostrar mensaje
                        Swal.fire({
                            title: 'Proceso terminado',
                            icon: 'success',
                        });
                    })
                        .catch(function (error) {
                            // Manejar cualquier error que pueda ocurrir durante el proceso
                            console.error('Error:', error);
                        });

                    //getParametros(); YR descomentar

                    /*
                     descomentar yr
                        Swal.fire({
                            title: 'Archivo traducido exitosamente',
                            icon: 'success',
                        });
                     */


                } else {
                    // Si el trabajo ha fallado, mostrar mensaje de error
                    Swal.fire({
                        title: 'Error al traducir el archivo',
                        text: 'Ha ocurrido un error al traducir el archivo.',
                        icon: 'error',
                    });
                }
            })
            .catch(error => {
                console.error('Error al obtener el estado del trabajo:', error);
                // Ocultar spinner y mostrar mensaje de error
                Swal.fire({
                    title: 'Error al traducir el archivo',
                    text: 'Ha ocurrido un error al traducir el archivo.',
                    icon: 'error',
                });
            });
    }

    // funcion para mostrar el modelo en viewer
    function mostrarModelo(urn) {
        //mostrar el modelo en el viewer
        //var urn = localStorage.getItem('urn');

        return new Promise(function (resolve, reject) {
            // Lógica para lanzar el visor aquí
            launchViewer(urn);
            //launchViewer('dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6dGVzdDJfY2hpbGVfYW50b2ZhZ2FzdGEvMDMtQ1I0MzIwLUJJTS1NT0QtVE9SUkUuQ0FQVEFDSU9OLjQuaWZj');
            // Supongamos que después de lanzar el visor llamamos a resolve para indicar que el proceso ha terminado
            resolve();
        });

    }

    //traer todos los parámetros de get http://localhost:3500/getParametros
    function getParametros() {
        $.ajax({
            url: 'http://localhost:3500/getParametros',
            type: "GET",
            success: function (data) {
                //console.log(data);
                //almacenar los valores de familia en un json localsotrage
                localStorage.setItem('familias', JSON.stringify(data));

            }
        })
    }

    //prueba*********************************************************
    $('#btncrearparametros').click(function () {
        //var uniqueProperties = {};

        //var jsonData = {

        //};

        //// Recorremos el JSON original
        //$.each(jsonData.data.collection, function (index, item) {
        //    $.each(item.properties, function (key, value) {
        //        // Verificamos si la propiedad ya existe en uniqueProperties
        //        if (!(key in uniqueProperties)) {
        //            uniqueProperties[key] = {};
        //        }
        //        // Iteramos sobre los subvalores de la propiedad
        //        $.each(value, function (subKey, subValue) {
        //            if (!(subKey in uniqueProperties[key])) {
        //                uniqueProperties[key][subKey] = [];
        //            }
        //            // Agregamos el subvalor solo si no existe en el array
        //            if ($.inArray(subValue, uniqueProperties[key][subKey]) === -1) {
        //                uniqueProperties[key][subKey].push(subValue);
        //            }
        //        });
        //    });
        //});

        //// Mostramos el resultado en la consola
        //console.log(JSON.stringify(uniqueProperties));

        //*****************************************************************
        const token = localStorage.getItem('token');
        const urn = localStorage.getItem('urn');

        const apiUrl = `https://developer.api.autodesk.com/modelderivative/v2/designdata/${urn}/metadata`;
        fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': token,
            },
        })
            .then(response => response.json())
            .then(data => {
                // Recorremos el array de metadatos
                $.each(data.data.metadata, function (index, item) {
                    // Verificamos si el objeto tiene la clave "guid"
                    if ("guid" in item) {
                        var guidValue = item.guid;
                        console.log('Recuperar una lista de elementos visibles: ' + guidValue);
                        localStorage.setItem("guid", guidValue);
                        // Aquí puedes usar guidValue como necesites
                    }
                });
            })
            .catch(error => {
                console.error('Error al obtener elementos visibles:', error);
                // Ocultar spinner y mostrar mensaje de error
                Swal.fire({
                    title: 'Error al obtener elementos visibles',
                    text: 'Ha ocurrido un error al obtener elementos visibles.',
                    icon: 'error',
                });
            }
            );
        //*****************************************************************
        //Recuperar propiedades de objetos en un Visor
        const guid = localStorage.getItem('guid');
        console.log('1111: ' + urn); //guid
        const apiUrlProp = `https://developer.api.autodesk.com/modelderivative/v2/designdata/${urn}/metadata/${guid}/properties`;
        fetch(apiUrlProp, {
            method: 'GET',
            headers: {
                'Authorization': token,
            },
        })
            .then(response => response.json())
            .then(data => {
                //console.log('total json: ' + data);
                var uniqueProperties = {};
                // Recorremos el JSON original
                $.each(data.data.collection, function (index, item) {
                    $.each(item.properties, function (key, value) {
                        // Verificamos si la propiedad ya existe en uniqueProperties
                        if (!(key in uniqueProperties)) {
                            uniqueProperties[key] = {};
                        }
                        // Iteramos sobre los subvalores de la propiedad
                        $.each(value, function (subKey, subValue) {
                            if (!(subKey in uniqueProperties[key])) {
                                uniqueProperties[key][subKey] = [];
                            }
                            // Agregamos el subvalor solo si no existe en el array
                            if ($.inArray(subValue, uniqueProperties[key][subKey]) === -1) {
                                uniqueProperties[key][subKey].push(subValue);
                            }
                        });
                    });
                });

                // Mostramos el resultado en la consola
                //console.log(JSON.stringify(uniqueProperties));
                localStorage.setItem("dataprop", JSON.stringify(uniqueProperties));

                // Obtener los títulos de cada grupo en el JSON
                var titles = Object.keys(uniqueProperties);

                // Recorrer los títulos y mostrarlos
                $.each(titles, function (index, title) {
                    //console.log("Título del grupo:", title);
                    $("#grupo").append('<option value="' + title + '">' + title + '</option>');
                });
            })
            .catch(error => {
                console.error('Error al obtener propiedades de objetos:', error);
                // Ocultar spinner y mostrar mensaje de error
                Swal.fire({
                    title: 'Error al obtener propiedades de objetos',
                    text: 'Ha ocurrido un error al obtener propiedades de objetos.',
                    icon: 'error',
                });
            }
            );

    });

    // Escuchar el evento change en el select grupo
    $("#grupo").on("change", function () {
        var selectedValue = $(this).val();
        //console.log("Opción seleccionada:", selectedValue);
        //console.log("dataprop", localStorage.getItem('dataprop'));

        // Aquí puedes realizar acciones basadas en la opción seleccionada
        var data = JSON.parse(localStorage.getItem('dataprop')); //JSON.parse(json);

        // Nombre del grupo a recorrer
        //var groupName = "Constraints";

        $('#parambim').empty();
        $("#parambim").append('<option value="0">Selecciona una opción</option>');
        // Recorrer las claves del grupo seleccionado
        Object.keys(data[selectedValue]).forEach(function (key) {
            //console.log("parámetros: " + key);
            $("#parambim").append('<option value="' + key + '">' + key + '</option>');
        });
    });

    // Escuchar el evento change en el select parámetro
    $("#parambim").on("change", function () {
        var selectedGrupo = $('#grupo').val();
        var selectedValue = $(this).val();
        var data = JSON.parse(localStorage.getItem('dataprop')); //JSON.parse(json);

        //console.log("Opción seleccionada:", selectedValue);
        //console.log("dataprop", data);

        // Obtener los valores de Level del JSON
        var valoresSelec = data[selectedGrupo][selectedValue];
        $("#valoresunicos").empty();
        // Recorrer los valores y hacer algo con cada uno
        valoresSelec.forEach(function (valor) {
            // Hacer algo con cada valor, por ejemplo, imprimirlo en la consola
            //console.log(valor);
            //$("#valoresunicos").append(valor + '<br>');

            var $textbox = $('<input>', {
                type: 'text',
                value: valor, //offset,
                id: 'textbox-', //+ index,
                disabled: true // Deshabilitado por defecto
            });

            var $checkbox = $('<input>', {
                type: 'checkbox',
                id: 'checkbox-' //+ index
            });

            var $label = $('<label>', {
                for: 'checkbox-', //+ index,
                text: ' Habilitar edición'
            });

            $checkbox.change(function () {
                toggleTextbox(this, $textbox);
            });

            $("#valoresunicos").append($textbox);
            $("#valoresunicos").append($checkbox);
            $("#valoresunicos").append($label);
            $("#valoresunicos").append('<br>');
        });
    });

    // Función para habilitar/deshabilitar el textbox
    function toggleTextbox(checkbox, textbox) {
        textbox.prop('disabled', !$(checkbox).is(':checked'));
    }

    var matrizGlobal = [];
    // Evento click para el botón de guardar
    $("#registrar").click(function (event) {
        event.preventDefault();

        var editedValues = [];

        // Recorrer todos los textboxes para encontrar los que están habilitados y editados
        $("#valoresunicos input[type='text']").each(function () {
            if (!$(this).prop('disabled')) {
                var value = $(this).val();

                // Comprobar si el valor ya está en la matriz global
                var isDuplicate = matrizGlobal.some(function (row) {
                    return row.valor === value;
                });

                if (!isDuplicate) {
                    var filaMatrizGlobal = {}; // Crear una nueva instancia para cada fila

                    filaMatrizGlobal['parametro_cosapi'] = $('#parametrocosapi').val();
                    filaMatrizGlobal['grupo'] = $('#grupo').val();
                    filaMatrizGlobal['parametro'] = $('#parambim').val();
                    filaMatrizGlobal['valor'] = value;

                    editedValues.push(filaMatrizGlobal); // Agregar la nueva fila a editedValues
                }
            }
        });

        // Agregar los valores no duplicados a la matriz global
        matrizGlobal = matrizGlobal.concat(editedValues);

        // Mostrar los valores editados (puedes guardarlos en localStorage o enviarlos al servidor)
        console.log("Valores global:", matrizGlobal);

        alert(JSON.stringify(matrizGlobal)); // Mostrar los valores globales en una alerta
    });

    $("#grabar").click(function (event) {
        event.preventDefault();

        var modelosRequest = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(new ModelosRequest())));

        modelosRequest.idProyectos = @ViewBag.IdProyecto;
        modelosRequest.modelo = localStorage.getItem('modelname');
        modelosRequest.disciplina = $('#disciplina').val();
        modelosRequest.estatus = "";
        modelosRequest.urn = localStorage.getItem('urn');
        modelosRequest.Parametros = matrizGlobal;

        // Realiza una solicitud fetch al endpoint '/Modelos/InsertarModelo'
        fetch('@Url.Action("InsertarModelo", "Modelos")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(modelosRequest)
        })
            .then(response => response.json())
            .then(data => {
                if (data.content == 1) {
                    swal('Éxito', "Accesos actualizados.", "success");
                } else {
                    swal('Error', 'Comuniquese con el área informáica: ' + data, 'error');
                }
            });
    });
</script>